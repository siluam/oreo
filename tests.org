#+property: header-args:hy+ :tangle (meq/tangle-path)

* tests
** test-eclair.hy

#+begin_src hy
(import oreo [eclair])
(defn test-eclair [] (for [i (eclair (range 100) "69611341-cf92-48bb-8cda-79c7fe28d9f2" "red")]))
#+end_src

** test-gensing.hy

#+begin_src hy
(import oreo [tea])
(setv test (tea :a "b" :c "d"))
(defn test-gensing []
      (.append test "f")
      (.extend test "h" "j" "l")
      (.glue test "mnop")
      (.glue test (tea :q "r" :s "t"))
      (.glue test ["v" "x"])
      (assert (test) "b d f h j lmnopr tv x"))
#+end_src

** test-either?.hy

#+begin_src hy
(import oreo [either?])
(import collections [OrderedDict])
(import addict [Dict])

(defn test-either-OrderedDict-dict [] (assert (either? OrderedDict dict)))
(defn test-either-OrderedDict-Dict [] (assert (either? OrderedDict Dict)))
(defn test-either-Dict-dict [] (assert (either? Dict dict)))

(defn test-either-Dict-not-string [] (assert (= (either? "Dict" Dict) False)))

(defn test-either-isinstance-string [] (assert (either? "Dict" str)))

(defn test-either-none-of [] (assert (= (either? "Dict" Dict list) False)))

(defn test-either-one-of [] (assert (either? "OrderedDict" "Dict" list)))

(defn test-either-instances [] (assert (either? "OrderedDict" "Dict")))
#+end_src

** test-first-last-n.hy

#+begin_src hy
(import oreo [first-last-n])
(setv ten (range 10))

(defn test-first-5 [] (assert (all (gfor i (range 5) (in i (first-last-n :iterable ten :number 5))))))
(defn test-last-5 [] (assert (all (gfor i (range 5 10) (in i (first-last-n :iterable ten :number 5 :last True))))))
#+end_src

** test-flatten.hy

#+begin_src hy
(import oreo [flatten])
(setv nested #(1 #(2 #(3 #(4)))))
(setv flattened [1 2 3 4])

(defn test-flatten-one-item [] (assert (= (flatten 1) [1])))

(defn test-flatten-all [] (assert (= (flatten nested) flattened)))
(defn test-flatten-nothing [] (assert (= (flatten nested :times 0) nested)))
(defn test-flatten-once [] (assert (= (flatten nested :times 1) [1 2 #(3 #(4))])))
(defn test-flatten-twice [] (assert (= (flatten nested :times 2) [1 2 3 #(4)])))
(defn test-flatten-thrice [] (assert (= (flatten nested :times 3) flattened)))

(defn test-flatten-all-unpacked [] (assert (= (flatten #* nested) flattened)))
(defn test-flatten-nothing-unpacked [] (assert (= (flatten #* nested :times 0) nested)))
(defn test-flatten-once-unpacked [] (assert (= (flatten #* nested :times 1) [1 2 #(3 #(4))])))
(defn test-flatten-twice-unpacked [] (assert (= (flatten #* nested :times 2) [1 2 3 #(4)])))
(defn test-flatten-thrice-unpacked [] (assert (= (flatten #* nested :times 3) flattened)))
#+end_src
