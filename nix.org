* .envrc

#+begin_src shell :tangle (meq/tangle-path)
use nix
#+end_src

* shell.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; let
    this-flake = import ./.;
    flake = this-flake.inputs.titan or this-flake.inputs.settings.inputs.titan or (if (builtins ? getFlake) then (getFlake github:syvlorg/titan) else (import fetchTarball (let
        lockExists = pathExists ./flake.lock;
        lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.titan.locked.rev = "main"; };
    in {
        url = "https://github.com/syvlorg/titan/archive/${lock.nodes.titan.locked.rev}.tar.gz";
        ${if lockExists then "sha256" else null} = lock.nodes.titan.locked.narHash;
    }) { src = ./.; }).defaultNix);
    inherit (flake.${currentSystem}) pkgs;
in with pkgs; mkShell rec {
    buildInputs = [ titan ];
    nativeBuildInputs = buildInputs;
}
#+end_src

* default.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
with builtins; if (builtins ? getFlake) then (getFlake (toString ./.)) else (import fetchTarball (let
    lockExists = pathExists ./flake.lock;
    lock = if lockExists then (fromJSON (readFile ./flake.lock)) else { nodes.flake-compat.locked.rev = "master"; };
in {
    url = "https://github.com/edolstra/flake-compat/archive/${lock.nodes.flake-compat.locked.rev}.tar.gz";
    ${if lockExists then "sha256" else null} = lock.nodes.flake-compat.locked.narHash;
}) { src = ./.; }).defaultNix
#+end_src

* flake.nix

#+begin_src nix :tangle (meq/tangle-path)
{
    description = "The Stuffing for Other Functions!";
    inputs = rec {
        settings.url = github:sylvorg/settings;
        titan.url = github:syvlorg/titan;
        py3pkg-rich.url = github:syvlorg/rich;
        py3pkg-pytest-hy.url = github:syvlorg/pytest-hy;
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };
    };
    outputs = inputs@{ self, flake-utils, settings, ... }: with builtins; with settings.lib; with flake-utils.lib; settings.mkOutputs {
        inherit inputs;
        callPackage = { stdenv
            , addict
            , autoslot
            , click
            , coconut
            , cytoolz
            , hy
            , hyrule
            , more-itertools
            , nixpkgs
            , toolz
            , pname
            , rich
        }: j.mkPythonPackage self stdenv [] (rec {
            owner = "syvlorg";
            inherit pname;
            src = ./.;
            propagatedBuildInputs = [
                addict
                autoslot
                click
                coconut
                cytoolz
                hy
                hyrule
                more-itertools
                nixpkgs
                rich
                toolz
            ];
            postPatch = ''
                substituteInPlace pyproject.toml --replace "rich = { git = \"https://github.com/${owner}/rich.git\", branch = \"master\" }" ""
                substituteInPlace pyproject.toml --replace "hy = \"^0.24.0\"" ""
                substituteInPlace pyproject.toml --replace "hyrule = \"^0.2\"" ""
                substituteInPlace setup.py --replace "'rich @ git+https://github.com/${owner}/rich.git@master'," ""
                substituteInPlace setup.py --replace "'hy>=0.24.0,<0.25.0'," ""
                substituteInPlace setup.py --replace "'hyrule>=0.2,<0.3'," ""
            '';
            meta = {
                description = "The Stuffing for Other Functions!";
                homepage = "https://github.com/${owner}/${pname}";
            };
        });
        pname = "oreo";
        type = "hy";
    };
}
#+end_src
