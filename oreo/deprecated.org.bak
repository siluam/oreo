#+property: header-args:hy+ :tangle yes

* Rich Traceback

#+begin_src hy
(import rich.traceback)
(.install rich.traceback :show-locals True)
#+end_src

* Imports

#+begin_src hy
(import click)
(import requests)
(import secrets)
#+end_src

* Eval and Compile

#+begin_src hy
(eval-and-compile (import os hy))
#+end_src

** From

#+begin_src hy
(import addict [Dict])
(import autoslot [SlotsMeta])
(import base64 [urlsafe_b64encode :as b64e urlsafe_b64decode :as b64d])
(import collections [OrderedDict])
(import contextlib [contextmanager])
(import cryptography.fernet [Fernet])
(import cryptography.hazmat.backends [default_backend])
(import cryptography.hazmat.primitives [hashes])
(import cryptography.hazmat.primitives.kdf.pbkdf2 [PBKDF2HMAC])
(import hy [mangle unmangle])
(import hyrule [inc dec])
(import importlib.util [spec-from-file-location module-from-spec])
(import importlib.machinery [SourceFileLoader])
(import ipaddress [IPv4Address IPv6Address])
(import itertools [islice product])
(import more-itertools [powerset unique-everseen])
(import pathlib [Path])
(import pytest [mark param])
(import random [randint])
(import rich [print])
(import rich.pretty [pprint])
(import rich.progress [Progress])
(import time [sleep])
(import types [ModuleType])
(import uuid [uuid4])
(import valiant [coll? module-installed])
#+end_src

*** Coconut

[[https://coconut.readthedocs.io/en/latest/index.html][Coconut]]:

#+begin_src hy
(try (import coconut *)
     (except [ImportError] None))
#+end_src

*** Toolz

[[https://github.com/pytoolz/toolz][Toolz]] and [[https://github.com/pytoolz/cytoolz/][CyToolz]]:

#+begin_src hy
(try (import cytoolz [first last])
     (except [ImportError]
             (import toolz [first last])))
#+end_src

* Requires

#+begin_src hy
(require hyrule [-> ->> assoc unless defmacro/g!])
#+end_src

* Assert

#+begin_src hy
(defmacro Assert [a [b True] [message None]] `(if (= ~a ~b) ~a (raise (AssertionError (or ~message ~a)))))
#+end_src

* Run Code in Another Directory and Come Back

#+begin_src hy
(defmacro/g! with-cwd [dir #* body]
             `(do (import os :as ~g!os pathlib [Path :as ~g!Path])
                  (setv ~g!cwd (.cwd ~g!Path))
                  (try ((. ~g!os chdir) ~dir)
                       ~@body
                       (finally ((. ~g!os chdir) ~g!cwd)))))
#+end_src

** Also Set Variables

Adapted from [[https://stackoverflow.com/users/1451346/kodiologist][Kodiologist's]] comment [[https://stackoverflow.com/questions/73084195/require-macros-from-the-same-file-in-another-macro#comment129093172_73084195][here]]:

#+begin_src hy
(defmacro/g! let-cwd [dir vars #* body]
             `(do (require oreo.oreo [with-cwd :as ~g!with-cwd])
                  (let ~vars
                       (~g!with-cwd ~dir ~@body))))
#+end_src

* Choose Print

#+begin_src hy
(defn cprint [obj]
      (if (isinstance obj #(str bytes bytearray IPv4Address IPv6Address))
          (print obj)
          (pprint obj)))
#+end_src

* Either Instance

Adapted from [[https://stackoverflow.com/users/100297/martijn-pieters][Martijn Pieters']] answer [[https://stackoverflow.com/a/27475071/10827766][here]];
for more information, check out [[https://stackoverflow.com/users/179805/fletom][fletom's]] answer [[https://stackoverflow.com/a/17246726/10827766][here]],
and [[https://stackoverflow.com/users/210945/naught101][naught101's]] comment [[https://stackoverflow.com/questions/2611892/how-to-get-the-parents-of-a-python-class#comment70569175_2611939][here]]:

#+begin_src hy
(defn either? [first-type second-type #* args]
      (setv args #(first-type second-type #* args))
      (defn inner [cls]
            (return (if (hasattr cls "__mro__")
                        (gfor m cls.__mro__ :if (!= m object) m)
                        #(cls))))
      (any (gfor [i a]
                 (enumerate args)
                 :setv typle (tuple (flatten (gfor [j b]
                                                   (enumerate args)
                                                   :if (!= i j)
                                                   (inner (cond (isinstance b ModuleCaller) (b)
                                                                (isinstance b type) b
                                                                True (type b))))))
                 (cond (isinstance a ModuleCaller) (issubclass (a) typle)
                       (isinstance a type) (issubclass a typle)
                       True (or (issubclass (type a) typle)
                                 (isinstance a typle))))))
#+end_src

* Single Use Import

#+begin_src hy
(defn sui [*module attr]
      (return (if (setx module (module-installed *module))
                  (getattr module attr)
                  module)))
#+end_src

* Dots?

#+begin_src hy
(defn dots? [string] (or (= string ".") (= string "..")))
#+end_src

* Not Dots?

#+begin_src hy
(defn nots? [string] (not (dots? string)))
#+end_src

* Hidden?

#+begin_src hy
(defn hidden? [item] (.startswith item "."))
#+end_src

* Visible?

#+begin_src hy
(defn visible? [item] (not (.startswith item ".")))
#+end_src

* Mimic ls

#+begin_src hy
(defn ls [[dir None] [sort False] [key False] [reverse False]]
      (let [ dir (or dir (.cwd Path))
             output (lfor item (if (isinstance dir Path) (.iterdir dir) (.listdir os dir)) :if visible? (getattr item "name" item)) ]
           (if (or sort (!= key False) reverse)
               (sorted output :key (if (callable key) key None) :reverse reverse)
               output)))
#+end_src

* First or Last N Values

#+begin_src hy
(defn first-last-n [[iterable None] [last False] [number 0] [type- iter]]
      (setv iterable (tuple iterable)
            first-last-n/len (len iterable)
            result (if (and number iterable)
                       (if last
                           (cut iterable (- first-last-n/len number) first-last-n/len)
                           (cut iterable 0 number))
                       iterable))
      (return (type- result)))
#+end_src

* Flatten Iterable

#+begin_src hy
(defn flatten [#* iterable [times None]]
      (if (= (len iterable) 1)
          (do (setv first (get iterable 0))
              (if (= times 0)
                  (return first)
                  (setv iterable (if (coll? first)
                                     first
                                     iterable))))
          (when (= times 0) (return iterable)))
      (setv lst [])
      (for [i iterable]
           (if (and (coll? i)
                    (or (is times None)
                        times))
               (.extend lst (flatten i :times (if times (dec times) times)))
               (.append lst i)))
      (return lst))
#+end_src

* Multiple Partitions

#+begin_src hy
(defn multipart [string delimiter [all-parts None]]
      (setv all-parts (or all-parts []))
      (for [part (.partition string delimiter)]
           (if (and (in delimiter part) (!= delimiter part))
               (setv all-parts (multipart part delimiter :all-parts all-parts))
               (.append all-parts part)))
      (return (filter None all-parts)))
#+end_src

* Recursive Unmangle

#+begin_src hy
(defn recursive-unmangle [dct]
      (return (Dict (dfor [key value]
                          (.items dct)
                          (unmangle key)
                          (if (isinstance value dict)
                              (recursive-unmangle value)
                              value)))))
#+end_src

* Remove N Times

#+begin_src hy
(defn remove-fix-n [rfix string fix [n 1]]
      (defn inner [string] ((getattr string (+ "remove" rfix)) fix))
      (setv old-string "")
      (if n
          (for [i (range n)]
               (setv string (inner string)))
          (if (= (len fix) 1)
              (setv string ((getattr string (+ (if (= rfix "prefix") "l" "r") "strip")) fix))
              (while (!= old-string string)
                     (setv old-string string
                           string (inner string)))))
      (return string))
#+end_src

** Prefix

#+begin_src hy
(defn remove-prefix-n [string prefix [n 1]]
      (return (remove-fix-n "prefix" string prefix :n n)))
#+end_src

** Suffix

#+begin_src hy
(defn remove-suffix-n [string suffix [n 1]]
      (return (remove-fix-n "suffix" string suffix :n n)))
#+end_src

* Get Mangled or Unmangled Key

#+begin_src hy
(defn get-un-mangled [dct key [default None]]
      (return (or (.get dct (mangle key) None)
                  (.get dct (.replace (unmangle key) "_" "-") default))))
#+end_src

* ModuleCaller

Adapted from [[https://stackoverflow.com/users/11769765/friedrich][Friedrich's]] answer [[https://stackoverflow.com/a/61618555/10827766][here]].

#+begin_src hy
(defclass ModuleCaller)
#+end_src

* Integer Only

#+begin_src hy
(defn int? [value] (return (and (isinstance value int) (not (isinstance value bool)))))
#+end_src

* Check if Palindrome

#+begin_src hy
(defn palindrome? [string [strict False]]
      (let [ s (if strict string (.lower string))
             l (len s) ]
           (if (= (% l 2) 0)
               (= (cut (cut s (// l 2)) None None -1) (cut s (// l 2) None))
               (= (cut (cut s (// (dec l) 2)) None None -1) (cut s (// (inc l) 2) None)))))
#+end_src

* Generate Palindromes

#+begin_src hy
(defn genpal [[n 1] [odd None]]
      (let [ p [] ]
           (for [i (range n)]
                (let [ o (if (is odd None) (randint 0 1) odd)
                       c (lfor j (range (randint 0 100)) (chr (randint 0 255))) ]
                     (.append p (.join "" (+ c (if o [ (chr (randint 0 255)) ] []) (cut c None None -1))))))
           (return p)))
#+end_src

* All Possible Combinations Dictionary

#+begin_src hy
(defn apcd [keys values]
      (->> (lfor s (powerset keys) (powerset (product s values)))
           last
           (map dict)))
#+end_src

** All Possible Options Dictionary

#+begin_src hy
(defn apod [keys values]
      (gfor s (unique-everseen (apcd keys values)) :if (= (len s) (len keys)) s))
#+end_src

* Mark Parameters

#+begin_src hy
(defn mark-params [params [func None]]
      (gfor p params (param p :marks (lfor [k v] (.items p) :if (if func (func k v) True) (getattr mark k)))))
#+end_src

** Mark All Possible Options Dictionary

#+begin_src hy
(defn mark-apod [keys values [func None]]
      (mark-params (apod keys values) (or func (when (all (gfor v values (isinstance v bool))) (fn [k v] v)))))
#+end_src

* Counter

Adapted from [[https://stackoverflow.com/users/37984/saffsd][saffsd's]] answer [[https://stackoverflow.com/a/829729/10827766][here]]:

#+begin_src hy
(defclass Counter []
          (defn __init__ [self count]
                (setv self.count (if (int? count)
                                     count
                                     (len count))))
          (defn __nonzero__ [self]
                (-= self.count 1)
                (>= self.count 0))
          (setv __bool__ __nonzero__))
#+end_src

* OAuth2 Bearer Authentication

Adapted from [[https://stackoverflow.com/users/3831197/zhe][Zhe's]] answer [[https://stackoverflow.com/a/58055668/10827766][here]]:

#+begin_src hy
(defclass BearerAuth [requests.auth.AuthBase]
          (defn __init__ [self token]
                (setv self.token token))
          (defn __call__ [self r]
                (assoc r.headers "authorization" (+ "Authorization: Bearer " self.token))
                (return r)))
#+end_src

* Password Encryption and Decryption

Adapted from [[https://stackoverflow.com/users/100297/martijn-pieters][Martijn Pieters']] answer [[https://stackoverflow.com/a/55147077/10827766][here]]:

#+begin_src hy
(setv backend (default-backend)
      iterations 100000
      encoding "utf-8")

(defn derive-key [password salt [iterations iterations]]
      "Derive a secret key from a given password and salt"
      (-> (PBKDF2HMAC :algorithm (.SHA256 hashes)
                      :length 32
                      :salt salt
                      :iterations iterations
                      :backend backend)
          (.derive password)
          b64e
          return))

(defn -password-encrypt [
      func
      message
      password
      [iterations iterations]
      [salt (.token-bytes secrets 16)]
      [encoding encoding]
]
      (let [ decryption (-> password
                            (.encode encoding)
                            (derive-key salt iterations)
                            Fernet
                            func
                            b64d) ]
           (-> (% b"%b%b%b" #(salt (.to-bytes iterations 4 "big") decryption))
               b64e
               return)))
#+end_src

** Regular

Adapted from [[https://github.com/pyca/cryptography/blob/main/src/cryptography/fernet.py#L54][here]], [[https://github.com/pyca/cryptography/blob/main/src/cryptography/fernet.py#L58][here]], and [[https://stackoverflow.com/users/9910846/cheesus][cheesus']] answer [[https://stackoverflow.com/a/73599705][here]]:

#+begin_src hy
(defn password-encrypt-parts [
      message
      #* args
      [iv (.token-bytes secrets 16)]
      [encoding encoding]
      #** kwargs
]
      (-password-encrypt
            (fn [f] (._encrypt_from_parts f (.encode message encoding) 0 iv))
            message
            #* args
            :encoding encoding
            #** kwargs))
#+end_src

** Random
*** Encryption

#+begin_src hy
(defn password-encrypt [
      message
      #* args
      [encoding encoding]
      #** kwargs
]
      (-password-encrypt
            (fn [f] (.encrypt f (.encode message encoding)))
            message
            #* args
            :encoding encoding
            #** kwargs))
#+end_src

*** Decryption

#+begin_src hy
(defn password-decrypt [token password [encoding encoding]]
      (let [ decoded (b64d token) ]
           (-> (.encode password encoding)
               (derive-key (cut decoded 0 16) (.from-bytes int (cut decoded 16 20) "big"))
               Fernet
               (.decrypt (b64e (cut decoded 20 None)))
               (.decode encoding)
               return)))
#+end_src

* The Meclair Class

Adapted from [[https://stackoverflow.com/users/36433/a-coady][A. Coady's]] answer [[https://stackoverflow.com/a/1800999/10827766][here]], as well as [[https://stackoverflow.com/users/302343/timur][Timur's]] answer [[https://stackoverflow.com/a/31537249/10827766][here]].

Remember that ~metaclasses~ use ~cls~ instead of ~self~!

#+begin_src hy
(defclass meclair [SlotsMeta]
#+end_src

** __init__

#+begin_src hy
(defn __init__ [cls #* args #** kwargs] (setv cls.Progress (Progress :auto-refresh False))))
#+end_src

* The Eclair Class

#+begin_src hy
(defclass eclair [:metaclass meclair]
#+end_src

** __init__

#+begin_src hy
(defn __init__ [self iterable name color [sleep 0.025]]
    (setv self.color color
          self.iterable (tuple iterable)
          self.len (len iterable)
          self.increment (/ 100 self.len)
          self.n 0
          self.name name
          self.sleep sleep)
#+end_src

*** Append preliminary invisible task to list of progress tasks

#+begin_src hy
(when (= (len self.__class__.Progress.task-ids) 0)
      (setv self.first-task (.add-task self.__class__.Progress f"[green]start" :total 0 :visible False)))
#+end_src

*** Append rich.progress task to list of progress tasks

Adapted from [[https://stackoverflow.com/users/100297/martijn-pieters][Martijn Pieters']] answer [[https://stackoverflow.com/a/26626707/10827766][here]],
as well as [[https://stackoverflow.com/users/9567/torsten-marek][Torsten Marek's]] answer [[https://stackoverflow.com/a/328882/10827766][here]]:

#+begin_src hy
(setv self.task (.add-task self.__class__.Progress f"[{self.color}]{self.name}" :total self.len :start False))
#+end_src

*** End of __init__

#+begin_src hy
)
#+end_src

** __iter__

#+begin_src hy
(defn __iter__ [self]
      (setv self.n 0)
      (if (= (len self.__class__.Progress.task-ids) 2)
          (do (.start self.__class__.Progress)
              (.start-task self.__class__.Progress (get self.__class__.Progress.task-ids 1)))
          (.start-task self.__class__.Progress self.task))
      (return self))
#+end_src

** __next__

#+begin_src hy
(defn __next__ [self]
      (if (< self.n self.len)
          (try (sleep self.sleep)
               (.update self.__class__.Progress self.task :advance self.increment :refresh True)
               (return (get self.iterable self.n))
               (finally (+= self.n 1)))
          (try (raise StopIteration)
               (finally (.stop-task self.__class__.Progress self.task)
                        (when self.__class__.Progress.finished
                              (.stop self.__class__.Progress))))))
#+end_src

** End of Eclair

#+begin_src hy
)
#+end_src

* Click
** Options

All options are adapted from [[https://stackoverflow.com/users/7311767/stephen-rauch][Stephen Rauch's]] answer [[https://stackoverflow.com/a/55881912/10827766][here]].

#+begin_src hy
(defclass Option [click.Option]
#+end_src

*** Static Methods
**** Name

#+begin_src hy
(defn [staticmethod] static/name [name]
      (-> name
          (remove-prefix-n "-" :n 2)
          (.replace "-" "_")
          (.lower)))
#+end_src

**** Joined Options

#+begin_src hy
(defn [staticmethod] static/opt-joined [name opt-val opt-len]
      (if (= opt-len 1)
          #[f["{(get opt-val 0)}"]f]
          #[f["{(.join "\", \"" (gfor opt opt-val :if (!= opt name) opt))}"]f]))
#+end_src

**** Option[s]

#+begin_src hy
(defn [staticmethod] option? [opt-len] (if (<= opt-len 2) "option" "options"))
#+end_src

**** Are Is?

#+begin_src hy
(defn [staticmethod] is? [opt-len] (if (<= opt-len 2) "is" "are"))
#+end_src

**** Da use?

#+begin_src hy
(defn [staticmethod] da-use? [opt-len] (if (= opt-len 1) "the use" "one or more"))
#+end_src

**** Generate Help String

#+begin_src hy
(defn [staticmethod] static/gen-help [help end] (+ help "\nNOTE: This option " end))
#+end_src

*** __init__

#+begin_src hy
(defn __init__ [self #* args #** kwargs]
#+end_src

**** Name

Naming convention taken from [[https://click.palletsprojects.com/en/8.0.x/options/#name-your-options][here]]:

#+begin_src hy
(setv nargs (get args 0)
      name (cond (= (len nargs) 1) (.static/name self.__class__ (get nargs 0))
                 (= (len nargs) 2) (if (.startswith (setx pre-name (get nargs 0)) "--")
                                       (.static/name self.__class__ pre-name)
                                       (.static/name self.__class__ (get nargs 1)))
                 (= (len nargs) 3) (get nargs 3)))
#+end_src

**** Help

#+begin_src hy
(setv help (.get kwargs "help" ""))
#+end_src

**** Options
***** Exclusive Or

~xor:~ list of options this can't be used with

#+begin_src hy
(setv self.xor (.pop kwargs "xor" #()))
(when self.xor
      (setv self.xor-len (len self.xor)
            self.xor-joined (.static/opt-joined self.__class__ name self.xor self.xor-len)
            self.xor-help #[f[is mutually exclusive with {(.option? self.__class__ self.xor-len)} {self.xor-joined}.]f]
            help (.static/gen-help self.__class__ help self.xor-help)))
#+end_src

***** One Required

~one-req:~ list of options of which one or more must be used

#+begin_src hy
(setv self.one-req (or (.pop kwargs "one_req" None)
                       (.pop kwargs "one-req" #())))
(when self.one-req
      (setv self.one-req-len (len self.one-req)
            self.one-req-joined (.static/opt-joined self.__class__ name self.one-req self.one-req-len)
            self.one-req-help #[f[must be used if {(.option? self.__class__ self.one-req-len)} {self.one-req-joined} {(.is? self.__class__ self.one-req-len)} not.]f]
            help (.static/gen-help self.__class__ help self.one-req-help)))
#+end_src

***** Requires One Of

~req-one-of:~ list of options of which one or more must be used with this option

#+begin_src hy
(setv self.req-one-of (or (.pop kwargs "req_one_of" None)
                          (.pop kwargs "req-one-of" #())))
(when self.req-one-of
      (setv self.req-one-of-len (len self.req-one-of)
            self.req-one-of-joined (.static/opt-joined self.__class__ name self.req-one-of self.req-one-of-len)
            self.req-one-of-help #[f[requires {(.da-use? self.__class__ self.req-one-of-len)} of {(.option? self.__class__ self.req-one-of-len)} {self.req-one-of-joined} as well.]f]
            help (.static/gen-help self.__class__ help self.req-one-of-help)))
#+end_src

***** Requires All Of

~req-all-of:~ list of options of which all must be used with this option

#+begin_src hy
(setv self.req-all-of (or (.pop kwargs "req_all_of" None)
                          (.pop kwargs "req-all-of" #())))
(when self.req-all-of
      (setv self.req-all-of-len (len self.req-all-of)
            self.req-all-of-joined (.static/opt-joined self.__class__ name self.req-all-of self.req-all-of-len)
            self.req-all-of-help #[f[requires {(.option? self.__class__ self.req-all-of-len)} {self.req-all-of-joined} as well.]f]
            help (.static/gen-help self.__class__ help self.req-all-of-help)))
#+end_src

**** Set Help

#+begin_src hy
(.update kwargs { "help" help })
#+end_src

**** Initialize Super

#+begin_src hy
(.__init__ (super) #* args #** kwargs)
#+end_src

**** End of __init__

#+begin_src hy
)
#+end_src

*** Handle Parse Result

~self.name in opts~ is being used because if absent,
the ~if~ condition would match regardless of whether this option is being used or not;
for example, if option ~a~ is mutually exclusive to option ~b~, using ~xor~, and ~self.name in opts~ wasn't used,
~command -a -b~ would fail as planned, but so would ~command -a~ and ~command -b~,
given that the option ~xor~ is still being parsed by the program.

#+begin_src hy
(defn handle-parse-result [self ctx opts args]
#+end_src

**** Options
***** Exclusive Or

#+begin_src hy
(when (and (in self.name opts)
           self.xor
           (any (gfor opt self.xor (in opt opts))))
      (raise (click.UsageError #[f[Sorry; "{self.name}" {self.xor-help}]f])))
#+end_src

***** One Required

#+begin_src hy
(when (and self.one-req
           (not (in self.name opts))
           (not (any (gfor opt self.one-req (in opt opts)))))
      (raise (click.UsageError #[f[Sorry; "{self.name}" {self.one-req-help}]f])))
#+end_src

***** Requires One Of

#+begin_src hy
(when (and (in self.name opts)
           self.req-one-of
           (not (any (gfor opt self.req-one-of (in opt opts)))))
      (raise (click.UsageError #[f[Sorry; "{self.name}" {self.req-one-of-help}]f])))
#+end_src

***** Requires All Of

#+begin_src hy
(when (and (in self.name opts)
           self.req-all-of
           (not (all (gfor opt self.req-all-of (in opt opts)))))
      (raise (click.UsageError #[f[Sorry; "{self.name}" {self.req-all-of-help}]f])))
#+end_src

**** Handle Parse Result for Super

#+begin_src hy
(return (.handle-parse-result (super) ctx opts args))
#+end_src

**** End of Handle Parse Result

#+begin_src hy
)
#+end_src

*** End of Options

#+begin_src hy
)
#+end_src

* Gensing

A play on words between ~ginseng~ tea and ~gen-string~!

# To override ~slice~ functionality, refer to [[https://stackoverflow.com/users/100297/martijn-pieters][Martijn Pieters']] answer [[https://stackoverflow.com/a/16033058/10827766][here]].

** Tea

#+begin_src hy
(defclass tea [OrderedDict]
#+end_src

*** __init__

#+begin_src hy
(defn __init__ [self #* args #** kwargs]
#+end_src

*** Create and Update Super Dict

#+begin_src hy
(setv super-dict (| (dict (enumerate args)) kwargs))
;; (.update super-dict kwargs)
#+end_src

**** Initialize Super with Super Dict

#+begin_src hy
(.__init__ (super) (gfor [k v] (.items super-dict) #(k v)))
#+end_src

**** End of __init__

#+begin_src hy
)
#+end_src

*** Gin

#+begin_src hy
(defn gin [self [delimiter " "] [override-type None]]
      (setv values (tuple (.values self)))
      (when override-type
            (setv values (tuple (map override-type values))))
      (try (setv first-value (get values 0))
           (except [IndexError] None)
           (else (return (cond (isinstance first-value str) (.strip (.join delimiter (map str values)))
                               (isinstance first-value int) (sum (map int values))
                               (all (gfor value values (isinstance value (type first-value))))
                                (do (setv total first-value)
                                    (for [value (cut values 1 (len values))]
                                         (+= total value))
                                    total)
                               True (raise (TypeError "Sorry! All values in the tea must be of the same type to join!")))))))
#+end_src

*** __call__

#+begin_src hy
(defn __call__ [self [delimiter " "] [override-type None]] (.gin self :delimiter delimiter :override-type override-type))
#+end_src

*** __str__

#+begin_src hy
(defn __str__ [self] (.gin self :override-type str))
#+end_src

*** Get Next Free Index

#+begin_src hy
(defn get-next-free-index [self]
      (setv current-len (len self)
            keys (.keys self))
      (when (in current-len keys)
            (while (in current-len keys)
                   (+= current-len 1)))
      (return current-len))
#+end_src

*** Append

#+begin_src hy
(defn append [self summand [key None]] (assoc self (or key (.get-next-free-index self)) summand))
#+end_src

*** Shifted

#+begin_src hy
(defn shifted [self #* args]
      (setv shift (.get-next-free-index self))
      (return (dfor [i s] (enumerate args) (+ i shift) s)))
#+end_src

*** Extend

#+begin_src hy
(defn extend [self #* args #** kwargs]
      (.update self (.shifted self #* args))
      (.update self kwargs))
#+end_src

*** Glue

If the ~summand~ is a collection, pop its first value and merge it with the last value in the current tea, otherwise simply do the latter.

#+begin_src hy
(defn glue [self summand [override-type None]]
      (setv [last-key last-value] (.popitem self :last True)
            last-value (if override-type
                           (override-type last-value)
                           last-value)
            summand-is-collection (coll? summand)
            summand-is-dict (isinstance summand dict)
            summand (if (and summand-is-collection
                             (not summand-is-dict))
                        (list summand)
                        summand)
#+end_src

Adapted from [[https://stackoverflow.com/users/3218806/maxbellec][maxbellec's]] answer [[https://stackoverflow.com/a/39292086/10827766][here]]:

#+begin_src hy
            summand-first-value (if summand-is-collection
                                    (.pop summand
                                          (if summand-is-dict
                                              (next (iter summand))
                                              0))
                                    summand)
#+end_src

#+begin_src hy
            summand-first-value (if override-type
                                    (override-type summand-first-value)
                                    summand-first-value)
            summand-first-value (if (either? last-value summand-first-value)
                                    summand-first-value
                                    (raise (TypeError "Sorry! The last value of this tea and first value of the provided collection must be of the same type!"))))
      (assoc self last-key (+ last-value summand-first-value))
      (when summand-is-collection
            (.update self (if summand-is-dict
                              summand
                              (.shifted self #* summand)))))
#+end_src

*** __add__

#+begin_src hy
(defn __add__ [self summand]
      (setv scopy (deepcopy self))
      (cond (isinstance summand dict) (.update scopy summand)
            (coll? summand) (.update scopy (.shifted scopy #* summand))
            True (assoc scopy (.get-next-free-index scopy) summand))
      (return scopy))
#+end_src

*** __sub__

#+begin_src hy
(defn __sub__ [self subtrahend]
      (setv scopy (deeepcopy self))
      (for [key subtrahend]
           (del (get scopy key)))
      (return scopy))
#+end_src

*** __eq__

#+begin_src hy
(defn __eq__ [self expr]
      (return (cond (isinstance expr self.__class__) (= (expr) (self))
                    (isinstance expr dict) (= (.items self) (.items (dfor [k v] (.items expr) (if (isinstance k hy.models.Keyword) k.name k) v)))
                    (coll? expr) (all (gfor [a b] (zip (.values self) expr :strict True) (= a b)))
                    (isinstance expr str) (= (self) expr)
                    True False)))
#+end_src

*** End of Tea

#+begin_src hy
)
#+end_src
